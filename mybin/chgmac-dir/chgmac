#!/bin/sh

# get different macs differnt interface

set -e
unset -v restore manual interface help version

check() {
  [ -x "$(command -v system_profiler)" ] || (echo "system_profiler is not in your \$PATH" && exit 1)
  [ -x "$(command -v ifconfig)" ] || (echo "ifconfig is not in your \$PATH" && exit 1)
  [ -x "$(command -v fzf)" ] || (echo "fzf is not in your \$PATH" && exit 1)
  [ -x "$(command -v terminal-notifier)" ] || (echo "terminal-notifier is not in your \$PATH" && exit 1)

  [ $(uname) == "Darwin" ] || (echo "Not on macOS" && exit 1)
}

trim() {
  set -f
  set -- $*
  printf '%s\n' "$*"
  set +f
}

split() {
  set -f
  o_ifs=$IFS
  IFS=$2
  set -- $1
  IFS=o_ifs
  set +f
}

readonly PROG="${0##*/}"
readonly VERSION="1.0"

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
UNDERLINE=$(tput smul)
RESET=$(tput sgr0)

cmd_version() {
	cat <<-_EOF
	${RED}${PROG}${RESET} ${GREEN}Version: ${VERSION}${RESET} ${RED}-${RESET} ${BLUE}Change MAC address on macOS
	_EOF
}


cmd_usage() {
	cmd_version
  cmd_short_usage
	echo
	cat <<-_EOF
	${BOLD}${MAGENTA}Usage:${RESET}
        ${RED}$PROG${RESET} ${BLUE}Provide a way to change macOS MAC address from the
        command line either randomly or manually.${RESET}

    	${BOLD}${YELLOW}Options:${RESET}
            ${BOLD}${BLUE}-r, --restore${RESET}           ${CYAN}Restore to system default MAC${RESET}
            ${BOLD}${BLUE}-m, --manual${RESET}            ${CYAN}Manually enter the MAC address in dialog box
                                      Optionally enter <MAC> on CLI without invoking dialog${RESET}
                                      ${RED}Type '-m x' (anything not a MAC) and be prompted for randomized addresses${RESET}
            ${BOLD}${BLUE}-i, --interface${RESET}         ${CYAN}Select the interface with FZF (default en0)
                                      Optionally enter <interface> on CLI without invoking FZF${RESET}
            ${BOLD}${BLUE}-v, --version${RESET}           ${CYAN}Show version information${RESET}
            ${BOLD}${BLUE}-h, --help${RESET}              ${CYAN}Print this help message and exit${RESET}
	_EOF
}

cmd_short_usage() {
    echo "${BOLD}${MAGENTA}Usage:${RESET} ${RED}${PROG}${RESET} ${BOLD}${BLUE}[--help,-h]" \
        "[--restore,-r]" \
        "[--manual,-m]" \
        "[--interface,-i]" \
        "[--version,-v]"
}


get_og_mac() {
  OGMAC=$(system_profiler SPNetworkDataType \
    | awk '$0 ~ /MAC/{print $3}')
}

get_curr_mac() {
  MAC=$(ifconfig "$INTERFACE" \
    | rg --color=never ether \
    | rg --color=never -o '(\w+:){5}(\w+){2}')
}

get_new_mac() {
  NMAC=$(openssl rand -hex 6 \
    | sed 's%\(..\)%\1:%g; s%.$%%')
}

notify() {
  terminal-notifier \
    -title "MAC Address" \
    -message "Interface ===== $INTERFACE
Old ========== $MAC
New ========== $NMAC"
}

get_interfaces() {
 ifconfig \
 | awk 'BEGIN{FS="\t"} {print $1}' \
 | awk '{print $1}' \
 | sed '/^$/d; s/://g'
}

get_user_interface() {
  INTERFACE=$(get_interfaces | fzf --prompt="Select interface: ")
}

get_manual() {
    while ! echo "$ANS" | rg --color=never -q '(\w+:){5}(\w+){2}'; do
      ANS=$(\
      dialog --title "Change MAC Address - Pattern: a1:5a:3e:8e:03:6b" \
            --cancel-label "Exit" \
            --inputbox 'Enter new MAC: ' 10 60 \
      3>&1 1>&2 2>&3 3>&- \
    )
    done

    NMAC=${ANS}
}

gen_random_mac() {
    openssl rand -hex 6 | sed 's%\(..\)%\1:%g; s%.$%%'
}

gen_rand_mac_list() {
  CHOOSEMAC=$(
  : "$((i=1))"
  while [ "$((i != 10))" -ne 0 ]; do
    printf "%b%s%b%s%b\n> " "${BOLD}${MAGENTA}[" "$i" "] ${BLUE}" "$(gen_random_mac)" "${RESET}"
    : "$((i = i + 1))"
  done
  )
}

main() {
  INTERFACE="en0"

  get_curr_mac
  get_new_mac

  for arg in "$@"; do
    shift
    case "$arg" in
      "--restore")   set -- "$@" "-r" ;;
      "--manual")    set -- "$@" "-m" ;;
      "--interface") set -- "$@" "-i" ;;
      "--help")      set -- "$@" "-h" ;;
      "--version")   set -- "$@" "-v" ;;
      "--"*)         cmd_usage ${arg}; exit 22;;
      *)             set -- "$@" "$arg" ;;
    esac done

  OPTIND=1 # may not need to initialize
  while getopts ":r m :h :v i" o; do case "${o}" in
    r) get_og_mac; NMAC=${OGMAC} ;;
    m)
      eval MNEXTOPT=\${$OPTIND}
      if [ -n "$MNEXTOPT" ] && [ "$MNEXTOPT" != -* ]; then
        OPTIND=$((OPTIND + 1))
        while ! echo "$MNEXTOPT" | rg --color=never -q '((\w+:){5}(\w+){2}|\bR\b|\bF\b)'; do
          printf "%$(tput cols)s" | tr " " "="
          printf "%b\n>> " "${BLUE}${UNDERLINE}Enter correctly formatted MAC address:${RESET}
          ${BOLD}${RED}For example: 0a:2b:c3:4d:5e:f6${RESET}
          ${BOLD}${CYAN}Press \"R\" for a list of 10 randomized addresses in console${RESET}
          ${BOLD}${MAGENTA}Press \"F\" for a list in FZF${RESET}"
          read -r MNEXTOPT
        done
        NMAC=$MNEXTOPT

        if [ "$NMAC" = "R" ]; then
          printf "%$(tput cols)s" | tr " " "="
          printf "%b> " "${YELLOW}Enter a number for a randomized MAC Addresses:${RESET}\n"

          gen_rand_mac_list

          printf "%b\n" "${BLUE}${CHOOSEMAC}${RESET}"

          read -r -p ">> " RANDMAC
          case "${RANDMAC}" in
            1) NMAC=$(echo "${CHOOSEMAC}" \
              | sed -E "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g; s/\(B//g" \
              | rg --color=never '\[1\]' | awk 'BEGIN{FS="]"}{print $2}' | tr -d ' ') ;;
            2) NMAC=$(echo "${RESET}${CHOOSEMAC}" \
              | sed -E "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g; s/\(B//g" \
              | rg --color=never '\[2\]' | awk 'BEGIN{FS="]"}{print $2}' | tr -d ' ') ;;
            3) NMAC=$(echo "${RESET}${CHOOSEMAC}" \
              | sed -E "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g; s/\(B//g" \
              | rg --color=never '\[3\]' | awk 'BEGIN{FS="]"}{print $2}' | tr -d ' ') ;;
            4) NMAC=$(echo "${RESET}${CHOOSEMAC}" \
              | sed -E "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g; s/\(B//g" \
              | rg --color=never '\[4\]' | awk 'BEGIN{FS="]"}{print $2}' | tr -d ' ') ;;
            5) NMAC=$(echo "${RESET}${CHOOSEMAC}" \
              | sed -E "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g; s/\(B//g" \
              | rg --color=never '\[5\]' | awk 'BEGIN{FS="]"}{print $2}' | tr -d ' ') ;;
            6) NMAC=$(echo "${RESET}${CHOOSEMAC}" \
              | sed -E "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g; s/\(B//g" \
              | rg --color=never '\[6\]' | awk 'BEGIN{FS="]"}{print $2}' | tr -d ' ') ;;
            7) NMAC=$(echo "${RESET}${CHOOSEMAC}" \
              | sed -E "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g; s/\(B//g" \
              | rg --color=never '\[7\]' | awk 'BEGIN{FS="]"}{print $2}' | tr -d ' ') ;;
            8) NMAC=$(echo "${RESET}${CHOOSEMAC}" \
              | sed -E "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g; s/\(B//g" \
              | rg --color=never '\[8\]' | awk 'BEGIN{FS="]"}{print $2}' | tr -d ' ') ;;
            9) NMAC=$(echo "${RESET}${CHOOSEMAC}" \
              | sed -E "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g; s/\(B//g" \
              | rg --color=never '\[9\]' | awk 'BEGIN{FS="]"}{print $2}' | tr -d ' ') ;;
            10) NMAC=$(echo "${RESET}${CHOOSEMAC}" \
              | sed -E "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g; s/\(B//g" \
              | rg --color=never '\[10\]' | awk 'BEGIN{FS="]"}{print $2}' | tr -d ' ') ;;
            *) printf "%b\n" "${RED}Invalid option"; exit 22 ;;
          esac
          elif [ "$NMAC" = "F" ]; then
          printf "%$(tput cols)s" | tr " " "="
          CHOOSEMAC=$(
            : "$((i=1))"
            while [ "$((i != 10))" -ne 0 ]; do
              printf "%s\n" "[$i] $(gen_random_mac)"
              : "$((i = i + 1))"
            done
          )
          prompt="Select a MAC address"
          fzf_cmd="fzf --print-query --prompt=\"$prompt\""
          NMAC=$(echo "${RESET}${CHOOSEMAC}" | eval "$fzf_cmd" | sed -E 's/^\[[0-9]+\]//g' | tr -d '\n')
        fi
      else
        get_manual
      fi
      ;;
    i)
      eval "INEXTOPT=\${$OPTIND}"
      if [ -n "$INEXTOPT" ] && [ "$INEXTOPT" != -* ]; then
        OPTIND=$((OPTIND + 1))
        while ! echo "$INEXTOPT" | rg --color=never -q "$(get_interfaces | tr '\n' '|' | sed -E 's/(.*)\|/\1/')|\bM\b"; do
          printf "%$(tput cols)s" | tr " " "="
          printf "%b%b\n>> " "${BLUE}${UNDERLINE}Enter a valid interface:${RESET}
          ${BOLD}${RED}Press \"M\" for a list of your interfaces"
          read -r INEXTOPT
        done
        INTERFACE=$INEXTOPT

        if [ "$INTERFACE" = "M" ]; then
          printf "%$(tput cols)s" | tr " " "="
          printf "%b\n" "${BOLD}${YELLOW}Enter a number for an interface:${RESET}\n"
          echo "$(get_interfaces)" | tr ' ' '\n' | awk '{printf "[%d] %s\n", NR, $0}'

          # read -r -p ">> " INTNAME
          # case "${INTNAME}" in
          #   1) ;;
          #   2) ;;
          # esac
        fi

      else
        get_user_interface
      fi
      ;;
    h) cmd_usage; exit 0 ;;
    v) cmd_version; exit 0 ;;
    *) printf "Invalid option: -%b\\n" "${RED}${OPTARG}"; cmd_usage; exit 22 ;;
  esac done

  shift $((OPTIND - 1))

  # sudo ifconfig "$INTERFACE" ether "$NMAC"
  notify
}

# [ "$(dirname "$(readlink -f -- "$@")")" ] && \
main "$@"
