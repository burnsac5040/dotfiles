#!/usr/bin/env zsh

# desc: use fzf with tag

emulate -LR zsh
builtin setopt extendedglob typesetsilent
# localoptions noksharrays noshortloops warncreateglobal

# TODO: add support for skim
# Set search as optional args to prevent errors
local -A opts
zparseopts -D -A opts w -wutag h -help s -skim b -boxes c -lolcat t -toilet -\
    l -local q::=query -query::=query

0="${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}"
local prog
typeset -gH FZFTAG_QUERY FZFTAG_FILTER
prog="${0:A:t}"
FZFTAG_QUERY=${${(v)opts[(I)(-q|--query)]}:-}  # fzf query
FZFTAG_FILTER="${@:-*}"                        # tag filter (has to be exact)
export FZFTAG_QUERY
export FZFTAG_FILTER

# tag searching filter (exact) - only applicable if not local
# [[ ! ${${(M)${opts[(i)-l]}:#-l}:+1} ]] && filter="${@:-*}"

typeset -g +h LESS
LESS=${(j. .)${${(@)${(s: :)LESS}}//[[:space:]]#-r[[:space:]]#/}}
export LESS="$LESS -r"

local boxes lolcat toilet figlet lpager filemanager
(( ${+commands[figlet]} )) && figlet="figlet" || figlet="cat"
(( ${+commands[bat]} )) && lpager="bat --paging=always" || lpager="less"
(( ${+commands[tag]} )) || { print -P "%F{1}Error:%f %F{2}tag%f is not in PATH" 2>&1; exit }
filemanager=${commands[lf]:-${commands[ranger]:-${commands[xplor]}}}

warning() { builtin print -P "%F{3}Warning%f: $*" 2>&1; return 1; }
error() { builtin print -P "%F{1}Error%f: $*" 2>&1; exit 1; }

# zparseopts
zmodload zsh/zutil || error "zsh/zutil is required to use this program"
# ${commands[@]} array
zmodload zsh/parameter || error "zsh/parameter is requred to use this program"
# tput $COLUMNS
zmodload zsh/terminfo 2>/dev/null
zmodload zsh/termcap 2>/dev/null

_boxes() {
  (( ${+commands[boxes]} )) && boxes -d tex-box || {
    cat; warning "'boxes' is required to use this feature"
  }
}
_lolcat() {
  (( ${+commands[lolcat]} )) && lolcat || {
    cat; warning "'lolcat' is required to use this feature"
  }
}
_toilet() {
  # smblock smmono12
  (( ${+commands[toilet]} )) && toilet -f smmono12 -F border --filter gay "${(j. .)@}" || {
    cat "${(j. .)@}"; warning "'toilet' is required to use this feature"
  }
}

# Default printing
default_header() {
  local -a fig; integer max color; local -A opts
  zparseopts -D -- s:=opts c::=color
  fig=( "${(@f)$(figlet ${(v)opts[(e)-s]} )}" )
  max=${#${(On)fig}[1]}
  print -nPr "%F{${${color/-c/}:-2}}"
  print -lr -- "${(l:(( (COLUMNS+max)/2 )):: :)fig[@]}"
  print -Prn "%f"
  print -Pr -- "%F{1}${(l:COLUMNS::=:):-}%f"
}

parse_format() {
  # Toilet:
  if (( FZFTAG_TOILET )); then
    if (( FZFTAG_LOLCAT )); then
      if (( FZFTAG_BOXES )); then
        terminal-notifier -title 'tcb' -message 'x'
        # toilet -f smmono12 -F border --filter gay "${(j. .)@}" | boxes -d tex-box | lolcat # tcb
        _toilet "${(j. .)@}" | _boxes | _lolcat
      else
        _toilet "${(j. .)@}" | _lolcat          # tc
      fi
    else
      _toilet "${(j. .)@}"                      # t
    fi
  # Figlet:
  elif (( FZFTAG_LOLCAT )); then
      if (( FZFTAG_BOXES )); then
        $figlet "${(j. .)@}" | _boxes | _lolcat # cb
      else
        $figlet "${(j. .)@}" | _lolcat          # c
      fi
  elif (( FZFTAG_BOXES )); then
      $figlet "${(j. .)@}" | _boxes             # b
  else
    default_header -s "${(j. .)@}" -c 2         # default
  fi
}

usage() {
  default_header -s "ftag" -c 13
  print -P -- "%F{12}USAGE:%f"
  print -P -- "\t%F{2}ftag%f %F{13} [wsh]%f %F{2}<tag>%f"
  print -P -- "\t%F{12}ftag%f is an fzf TUI type for %F{2}tags%f on macOS"
  print -P -- "\tIt uses 'figlet' by default to display headers, though it is not needed"
  print -P -- "\t%F{2}<tag>%f is optional (has to be an exact match)"
  print -P -- "%F{12}FLAGS:%f"
  print -P -- "\t%F{2}-w%f,%F{2}--wutag%f\t\tAlso tag files with wutag"
  print -P -- "\t%F{2}-q%f,%F{2}--query <query>%f\tStart fzf with a query"
  # print -P -- "\t%F{2}-s%f,%F{2}--skim%f\tUse skim instead of fzf"
  print -P -- "\t%F{2}-h%f,%F{2}--help%f\t\tDisplay this help message"
  print -P -- "%F{12}FORMAT:%f"
  print -P -- "\t%F{2}-b%f,%F{2}--boxes%f\t\tAdd a box aroud header with %F{3}boxes%f"
  print -P -- "\t%F{2}-c%f,%F{2}--lolcat%f\t\tColor to header with %F{3}lolcat%f"
  print -P -- "\t%F{2}-t%f,%F{2}--toilet%f\t\tColor and format header with %F{3}toilet%f"
  print -P -- "\tThe above flags can be used in any combination. Figlet is ran if toilet isn't"
  print -P -- "\tspecified and vice-versa. Although figlet doesn't have a flag, it is ran by default."
  print -P -- "\tThe default printing (no flags specified and figlet installed) looks the nicest."
  print -P -- "%F{12}INSIDE FZF:%f"
  show_keys
}

show_keys() {
  print -P -- "\t%F{2}A%f\tAdd/append tags"
  print -P -- "\t%F{2}S%f\tSet tags (overwrites)"
  print -P -- "\t%F{2}D%f\tDelete/remove tags"
  print -P -- "\t%F{2}R%f\tReload the tag search"
  print -P -- "\t%F{2}U%f\tShow tag usage"
  print -P -- "\t%F{2}E%f\tEdit selected tags with \$EDITOR"
  print -P -- "\t%F{2}F%f\tOpen directory in which tagged file resides"
  print -P -- "\t%F{2}L%f\tSwitch to local mode (i.e., current directory)"
  print -P -- "\t%F{2}G%f\tSwitch to global mode (i.e., default mode/all tags on file system)"
  print -P -- "\t%F{2}?%f\tShow keys"
}

(( ${+opts[-h]} || ${+opts[--help]} )) && usage && exit 0

# File path content marks how to execute next command in the main loop
local current_filter
current_filter=${XDG_RUNTIME_DIR:-${XDG_CACHE_DIR:-${TMP-/tmp}}}/tag-filter
if ! touch $current_filter; then
  echo "${prog}: Can't create a marker file needed for internal state management." >&2
fi

# Keys to show within the TUI
if [[ "${_FZFTAG_SHOW}" = "keys" ]]; then
  print -P -- "\t%F{9}KEY%f\t%F{13}Action%f"
  print -P -- "\t%F{14}===\t======================%f"
  show_keys
  exit 0
fi

# FIXME: try and use this instead of awk
# declare -a input; input=($@)
# print -l "${input[@]/(#b)([^\/]##\/)##([^\/]##)*/${match[3]}}"

if [[ -n "$FZFTAG_ACTION" ]]; then
  clear
  # Get the filename
  tag_args="$(awk '{print $1}' $@)"
  [[ -f $tag_args ]] || echo 'Not a file'
  case "$FZFTAG_ACTION" in
    test)
      parse_format "test"
      vared -cp "Set tags for ${tag_args:t3}: " tag
      echo "-- ${(kv)opts}"
      ;;
    set)
      parse_format "set tags"
      vared -cp "Set tags for ${tag_args:t3}: " tag
      for file in "${(f)tag_args[@]}"; do
        tag --set "${tag}" "$file"
        # Wutag only works if variables are set first
        fname="${file:t}"; fdir="${file:h}"
        (( FZFTAG_WTAG )) && {
          wutag -d "${fdir}/" clear $fname
          wutag -d "${fdir}/" set $fname $tag
        }
      done
      ;;
    add)
      parse_format "add tags"
      vared -cp "Add tags for ${tag_args:t3}: " tag
      for file in "${(f)tag_args[@]}"; do
        tag --add "${tag}" "$file"
        fname="${file:t}"; fdir="${file:h}"
        (( FZFTAG_WTAG )) && {
          wutag -d "${fdir}/" set $fname $tag
        }
      done
      ;;
    remove)
      parse_format "remove tags"
      vared -cp "Remove tags for ${tag_args:t3}: " tag
      for file in "${(f)tag_args[@]}"; do
        tag --remove "${tag}" "$file"
        fname="${file:t}"; fdir="${file:h}"
        (( FZFTAG_WTAG )) && {
          wutag -d "${fdir}/" clear $fname
        }
      done
      ;;
    usage)
      tag --usage | ${(z)lpager}
      ;;
    edit)
      $EDITOR "$tag_args"
      ;;
    file-manager)
      $filemanager "${tag_args:h}"
      ;;
  esac
  clear
  print -Pr -- "%F{1}${(l:COLUMNS::=:):-}%f"
  print "End of 'tag "$FZFTAG_ACTION"' output. Press any key to continue"
  print -Pr -- "%F{1}${(l:COLUMNS::=:):-}%f"
  read
  exit $?
fi

local FZFTAG_CMD
if [[ -n "$FZFTAG_STATE" ]]; then
  case "$FZFTAG_STATE" in
    1) FZFTAG_CMD="$(tag -l | column -t)" ;;
    0) FZFTAG_CMD="$(tag -tf "$FZFTAG_FILTER" | column -t)" ;;

    # 1) FZFTAG_CMD="-l" ;;
    # 0) FZFTAG_CMD="-tf $FZFTAG_FILTER" ;;
  esac

  echo "$FZFTAG_CMD" > $current_filter
  exit
fi

if [[ -n "$_FZFTAG_RELOAD" ]]; then
  tag_arguments="$(<$current_filter)"
  if (( FZFTAG_STATE )); then
    output="$(tag -l | column -t)"
  else
    output="$(tag -tf "$tag_arguments" | column -t)"
  fi

  if [[ -n "$output" ]]; then
    echo "$output"
    terminal-notifier -title "$tag_arguments" -message 'x'
  else
    echo "No tags were found: $tag_arguments"
  fi
  exit
fi

# Write the initial tag search to the filter
echo "$FZFTAG_FILTER" >! $current_filter

# Reload mentioned specifically in case more features are added
# if [[ "${FZFTAG_ACTION:+1}" && "${${(M)_FZFTAG_RELOAD:#reload}:+1}" ]]; then
#   rm -f $current_filter
# fi

if [[ -z "${FZFTAG_CMD:+1}" ]] && [[ -z "${FZFTAG_ACTION:+1}" ]] && [[ "${_FZFTAG_RELOAD}" != "reload" ]]; then
  rm -f $current_filter
fi

# if [ -z "${_TASKFZF_LIST_CHANGE+1}" ] && [ -z "${_TASKFZF_TASK_ACT+1}" ] && [ "${_TASKFZF_INTERNAL}" != "reload" ]; then

# Variables have to be exported to be picked up on the next iteration of the loop
typeset -giH FZFTAG_WTAG FZFTAG_BOXES FZFTAG_LOLCAT FZFTAG_TOILET
while (( $? != 130 )); do

  if (( ${+opts[-w]} || ${+opts[--wutag]} )); then
    if (( ${+commands[wutag]} )); then
      export FZFTAG_WTAG=1
    else
      warning "%F{2}wutag%f is not in PATH
      Install %F{2}wutag%f or don't use %F{2}-w%f,%F{2}--wutag%f'"
    fi
  fi

  (( ${+opts[-b]} || ${+opts[--boxes]} ))  && export FZFTAG_BOXES=1
  (( ${+opts[-c]} || ${+opts[--lolcat]} )) && export FZFTAG_LOLCAT=1
  (( ${+opts[-t]} || ${+opts[--toilet]} )) && export FZFTAG_TOILET=1

  if [[ -w "$current_filter" ]]; then
    tag_arguments="$(<$current_filter)"
  else
    tag_arguments="$@"
    echo "$tag_arguments" >! $current_filter
  fi

  local cmd
  local -a FZFTAG_OPTS
  if (( ${+opts[-l]} || ${+opts[--local]} || FZFTAG_STATE )); then
    # export FZFTAG_STATE='local'
    cmd="tag -l"
    FZFTAG_OPTS=( "--prompt 'Local Tag> '" )
  else
    # export FZFTAG_STATE='global'
    cmd="tag -tf "$FZFTAG_FILTER""
    FZFTAG_OPTS=( "--prompt 'Tag> '" "--delimiter /" "--with-nth 4.." )
  fi
  ${(z)cmd} \
    | column -t \
    | fzf \
    ${${(z)${(j. .)FZFTAG_OPTS}}//\'} \
    --ansi \
    --query "$FZFTAG_QUERY" \
    --multi \
    --bind="A:execute(env FZFTAG_ACTION=add $0 {+f} < /dev/tty > /dev/tty 2>&1 )+print-query" \
    --bind="S:execute(env FZFTAG_ACTION=set $0 {+f} < /dev/tty > /dev/tty 2>&1 )+print-query" \
    --bind="E:execute(env FZFTAG_ACTION=edit $0 {+f} < /dev/tty > /dev/tty 2>&1 )+print-query" \
    --bind="D:execute(env FZFTAG_ACTION=remove $0 {+f} < /dev/tty > /dev/tty 2>&1 )+print-query" \
    --bind="U:execute(env FZFTAG_ACTION=usage $0 {+f} < /dev/tty > /dev/tty 2>&1 )+print-query" \
    --bind="T:execute(env FZFTAG_ACTION=test $0 {+f} < /dev/tty > /dev/tty 2>&1 )+print-query" \
    --bind="F:execute(env FZFTAG_ACTION=file-manager $0 {+f} < /dev/tty > /dev/tty 2>&1 )+print-query" \
    --bind="L:execute(env FZFTAG_STATE=1 $0)+reload(env _FZFTAG_RELOAD=reload $0)" \
    --bind="G:execute(env FZFTAG_STATE=0 $0)+reload(env _FZFTAG_RELOAD=reload $0)" \
    --bind="R:reload(env _FZFTAG_RELOAD=reload $0)" \
    --bind="?:execute(env _FZFTAG_SHOW=keys $0 | "${(e)lpager}" --paging=always)+print-query"
done

# vim: ft=zsh:et:sw=0:ts=2:sts=2:fdm=marker:fmr=[[[,]]]:
