snippet mit "MIT license" b
MIT (c) ${1:`git config user.name`}
${2}
endsnippet

global !p
from vimsnippets import get_comment_format
from subprocess import check_output
from datetime import datetime
endglobal

snippet todo "TODO comment" bw
`!p snip.rv=get_comment_format()[0]` ${1:TODO}: $2${3: <`!v strftime('%y-%m-%d %H:%M')`, `git config user.name`>} `!p snip.rv=get_comment_format()[2]`
endsnippet

snippet today "date of today" b
`date +%F`
endsnippet

snippet yesterday "date of today" b
`[[ "$OSTYPE" =~ darwin ]] && date -v -1d +%F || date --date=yesterday +%F`
endsnippet

snippet modeline2 "# vim: set ..." b
`!p
beg, end = vim.eval("&commentstring").split('%s')
snip.rv += beg.strip() + ' '
`vim: ${2:ft=${1:`!v printf('%s', &ft)`}}`!p
snip.rv += (': ' + end.strip()).strip()
`
endsnippet

snippet modeline3 "Vim settings" b
vim:${1:filetype=$2:}${3:foldmethod=${4:marker}:}${5:${7:tabstop=${6:4}:}${9:shiftwidth=${8:4}:}${11:softtabstop=${10:4}:}${12:noexpandtab:}}
endsnippet

snippet vims "Vim  Filetype"
`!p snip.rv=get_comment_format()[0]` vim: ${2:ft=${1:`!v printf('%s', &ft)`}}`!v (&expandtab ? printf(':et:sw=%i:ts=%i:sts=%i', &sw, &ts, &sts) : printf(':noet:sts=%i:sw=%i:ts=%i', &sts, &sw, &ts)) . (&tw ? ':tw='. &tw:'') . ':fdm=marker:fmr={{{,}}}:'`
endsnippet

snippet ttest "Description"
`!p
ft = snip.rv=vim.eval("&filetype")
if not ft:
	snip.rv=get_comment_format()[0]` vim`!v (&expandtab ? printf(':ft=%s:et:sw=%i:ts=%i:sts=%i', &ft, &sw, &ts, &sts) : printf(':noet sts=%i sw=%i ts=%i', &sts, &sw, &ts)) . (&tw ? ' tw='. &tw : '') . ':'`
`!p
else:
	snip.rv=get_comment_format()[0]` vim`!v (&expandtab ? printf(':ft=${1}:et:sw=%i:ts=%i:sts=%i', &sw, &ts, &sts) : printf(':noet sts=%i sw=%i ts=%i', &sts, &sw, &ts)) . (&tw ? ' tw='. &tw : '') . ':'`
endsnippet

snippet H "A header box" b
`!p
from datetime import datetime
if snip.ft in ['cpp', 'c', 'rust', 'go', 'cs']:
	u = '/' + '*' * 75
	d = '*' * 75 + '/'
	l = '%-4s' % '*'
	r = '%4s'  % '*'
else:
	c = get_comment_format()[0].strip()
	u = d = (c * 76)[:76]
	l = '%-4s' % c
	r = '%4s'  % c

username  = '%-68s' % (" Author: " + check_output(['git', 'config', 'user.name']).decode('utf-8').strip())
useremail = '%-68s' % ("  Email: " + check_output(['git', 'config', 'user.email']).decode('utf-8').strip())
time      = '%-68s' % ("Created: " + datetime.now().strftime('%F %H:%M'))

snip.rv += u
snip += l + username  + r
snip += l + useremail + r
snip += l + time      + r
snip += d
`
$0
endsnippet

snippet shebang "Add shebang line" b
#!/usr/bin/env ${1:`!v &filetype`}
endsnippet

snippet date "YYYY-MM-DD" w
`!v strftime("%Y-%m-%d")`
endsnippet

snippet time "HH:MM" w
`!v strftime("%H:%M")`
endsnippet

snippet dtime_readable "1997 Apr 27 11:53:25" w
`!v strftime("%Y %b %d %X")`
endsnippet

snippet dtime_iso8601 "1997 Apr 27 11:53:25" w
`!v strftime("%Y-%m-%dT%H:%M:%S")`
endsnippet

snippet timestamp
`!v strftime("%Y-%m-%d %H:%M:%S")`
endsnippet
