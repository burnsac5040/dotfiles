# == Plugins ================================================================ [[[

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'sainnhe/tmux-fzf'

TMUX_FZF_LAUNCH_KEY="C-f"
TMUX_FZF_OPTIONS="-p -w 80% -h 48% -m"
set -g @tpm-clean "C-u"

set-environment -g PATH "$ZPFX/bin:/bin:/usr/bin"
# ]]]

# == Keybindings Explained ================================================== [[[
# pref - r = source tmux
# pref - e = edit config
# pref - m = mouse on
# pref - M = mouse off
# pref - E = switch between synchronize
# pref - - = split horizontally
# pref - | = split vertically
# pref - HJKL = resize

# pref - & = kill window
# pref - W = swap window
# pref - { = swap window
# pref - } = swap window
# pref - shift + -> = swap window
# pref - shift + <- = swap window
# pref - shift + up = choose tree

# pref - hjkl = navigate panes
# pref - c-x = send pane to background
# pref - x = kill pane
# pref - P = swap pane
# pref - [ = swap pane
# pref - ] = swap pane
# pref - v = throw pane into current pane
# pref - h = throw pane into current pane
# pref - q = swap pane with selected pane
# pref - Q = swap pane with selected pane
# pref - W = interactively move pane to other window
# pref - P = interactively move pane to other window
# pref - alt-shift-p = swap current pane prompt
# pref - alt-p = move current pane prompt

# pref - X = kill all sessions
# pref - ) = switch sessions
# pref - ( = switch sessions
# pref - c-p = choose tree
# pref - alt-w = swap current window prompt

# pref - W = choose swap window
# pref - P = choose swap pane
# pref - c-p = choose move pane

# === Copy Mode ===
# esc = copy mode
# p = paste buffer
# + = delete buffer
# o = surfraw google
# U = youtube-viewer
# O = w3m

# pref - I = install plugin
# pref - U = update plugin

# pref - c-f = tmux-fzf
# pref alt-m = neomutt
# pref alt-r = newsboat
# pref alt-t = task spooler
# pref alt-s = surfraw
# pref - s = bmux
# pref - Enter = sr (split)
# pref Y = youtube-viewer
# pref b = open browser Buku (split)
# pref c-\ = open browser Buku

# Default
# c-d = close pane
# c-o = swap pane
# x = close pane
# d = detach window
# c = new window
# w = list windows
# ]]]

# == Base16 ================================================================= [[[

# base 16 colors with nord mix onedark palatees
base00=default   # - Black, Default background color
base01='#3b4252' # - Black, lighter, pane number
base02='#434c5e' # - Black, lighter, pane border
base03='#abb2bf' # - Black, greyish, window title
base04='#d8dee9' # - White
base05='#e5e9f0' # - White, lighter
base06='#eceff4' # - White, lighter
base07='#56b6c2' # - Light Green, status date
base08='#88c0d0' # - Light Blue, clock, active pane number
base09='#8bba7f' # - Sky Blue, status battery
base0A='#83a598' # - Dark Blue
base0B='#f2594b' # - Red, status prefix highlight
base0C='#f28534' # - Orange, tmux message
base0D='#fabd2f' # - yellow, active window, status zoom
base0E='#8ec07c' # - Green, status prefix off
base0F='#d3869b' # - Purple, active border, session
# ]]]

# == Colors ================================================================= [[[

# true color support
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",*256col*:Tc"
set -g display-panes-active-colour $base08
set -g display-panes-colour $base01

# set display timelimit
set-option -g display-panes-time 2000
set-option -g display-time 1000

# pane border colors
setw -g pane-active-border-style fg=$base09
setw -g pane-border-style fg=$base02
setw -g clock-mode-colour $base08

# pane number display
set-option -g display-panes-active-colour $base08
set-option -g display-panes-colour $base01

# clock style
set-window-option -g clock-mode-colour $base08
# ]]]

# == Status Bar ============================================================= [[[

# status bar general styles
set -g status 'on'
set -g status-left-length 30
set -g status-right-length 150
set -g status-style fg=$base02,bg=$base00,default
set -g message-style bg=$base00,fg=$base0C

# prefix config
set -g @prefix_highlight_empty_prompt ' ﬿ '
set -g @prefix_highlight_empty_attr fg=$base0E,bg=$base00
set -g @prefix_highlight_prefix_prompt '﬿'
set -g @prefix_highlight_fg $base0B
set -g @prefix_highlight_bg $base00
set -g @prefix_highlight_copy_prompt '﬿'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr fg=$base0D,bg=$base00
set -g @prefix_highlight_sync_prompt '﬿'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr fg=$base0A,bg=$base00

setw -g window-status-style fg=$base03,bg=$base00
setw -g window-status-format " #I #W"
setw -g window-status-current-style fg=$base0D,bg=$base00
setw -g window-status-current-format " #[bold]#W"

# left status
tm_session_name="#[default,bg=$base00,fg=$base0F]  #S "
set -g status-left "$tm_session_name"

# right status
tm_cpu=" #($HOME/mybin/tmux/cpu)"
tm_mem=" #($HOME/mybin/tmux/mem2)"
tm_bat=" #($HOME/mybin/tmux/batt)"
tm_prefix="#{prefix_highlight}"
tm_zoom="#[default,bg=$base00,fg=$base0D] #{?window_zoomed_flag,,}"
tm_upTime="#[default,fg=$base09,bg=$base00] #($HOME/mybin/tmux/osx_pretty_time)"
tm_pane="#[default,bg=$base00, fg=$base0F]  #P"
set -g status-right "$tm_pane $tm_upTime $tm_cpu $tm_mem $tm_zoom $tm_prefix"
# ]]]

# == General ================================================================ [[[

# start window and pane numbering from 1
set -g base-index 1
# renumber windows on close
set -g renumber-windows on
# status refersh 5sec
set -g status-interval 5
# vim esc time
set -sg escape-time 10
# increase scrollback buffer size
set -g history-limit 10000
# tmux messages are displayed for 4 seconds
set -g display-time 4000
# don't rename windows automatically
set -g allow-rename off
# increase repeat time (repeat after prefix with -r flag)
set -g repeat-time 1500
set -g set-clipboard on
set -g mouse on
# default shell
# set-option -g default-command "reattach-to-user-namespace -l zsh"
set-option -g default-command /bin/zsh
set-option -g default-shell /bin/zsh
# ]]]

# == Keybinds =============================================================== [[[
# enable shell hotkeys C-left/C-right
# set-window-option -g xterm-keys on

set -q -g status-utf8 on
setw -q -g utf8 on
setw -g aggressive-resize on
setw -g pane-base-index 1

# remap prefix from 'C-b' to 'C-a'
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# clear screen and scrollback history
# bind C-l send-keys 'C-l'
bind-key -n C-l send-keys C-l \; run 'tmux clear-history'
# is bound to wfxr_formarks
bind C-k send-keys 'C-k'
# is bound to per_dir_history
bind C-h send-keys 'C-h'

# maximize current pane
bind + run 'cut -c3- ~/.config/tmux/tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# resize
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# select panes
bind-key k select-pane -U
bind-key h select-pane -L
bind-key j select-pane -D
bind-key l select-pane -R

# bind-key -n C-h if-shell $tmux__is_vim "send-keys C-h"  "select-pane -L"
# bind-key -n C-j if-shell $tmux__is_vim "send-keys C-j"  "select-pane -D"
# bind-key -n C-k if-shell $tmux__is_vim "send-keys C-k"  "select-pane -U"
# bind-key -n C-l if-shell $tmux__is_vim "send-keys C-l"  "select-pane -R"

# split panes using | and - (with same profile path)
bind |   split-window -h -c "#{pane_current_path}"
bind -   split-window -v -c "#{pane_current_path}"
bind c   new-window      -c '#{pane_current_path}'
unbind '"'
unbind %

# switch between sessions
bind -r ( switch-client -p
bind -r ) switch-client -n

# swap windows
bind-key -n S-Up choose-tree -Zw "swap-window -t '%%'"
bind-key -n S-Left previous-window
bind-key -n S-Right next-window
bind -r "{" swap-window  -t -1
bind -r "}" swap-window  -t +1
bind [   swap-pane    -U
bind ]   swap-pane    -D

# cycle windows/panes (no prefix)
bind-key -n Å select-pane -t :.+ \; resize-pane -Z  # next pane zoom -- M-S-a
bind-key -n Í select-pane -t :.+  # next pane -- M-S-s
bind-key -n Œ select-window -t :- # previous window -- M-S-q
bind-key -n „ select-window -t :+ # next window -- M-S-w

# switch between synchronize all pane
bind E setw synchronize-panes

# throw a pane into current pane from another window
bind v choose-window "join-pane -v -s "%%""
bind h choose-window "join-pane -h -s "%%""

# kill without confirm
bind-key x kill-pane
bind-key & kill-window
# unlink-window -k = unlink if multiple session else kill
# kill all sessions
bind-key X kill-session -a
# send pane to background and not kill it
bind-key C-x break-pane -dP
# join-pane -vs session:window.pane

bind-key m set-option -g -q mouse on \; display-message 'Mouse: ON'
bind-key M set-option -g -q mouse off \; display-message 'Mouse: OFF'

# swap current pane with the selected pane
bind q display-panes "swap-pane -t "%%""
bind Q display-panes

# reload config file directly using prefix r
bind r source-file ~/.config/tmux/tmux.conf \; display-message "Configuration reloaded"
# \; run -b "terminal-notifier -message 'config sourced' -title 'tmux'"

# edit config
bind-key e new-window -n 'conf' 'vim ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'

# bmux
bind s display-popup -E bmux -a

# fix mouse
unbind -T root MouseDrag1Pane
unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi MouseDown1Pane select-pane\; send-keys -X clear-selection

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
# ]]]

# == Vim Keybinds =========================================================== [[[
# vim keys in command prompt
set-option -g status-keys vi
# copying selection vim style
bind-key Escape copy-mode     # default key: prefix [
bind-key p paste-buffer       # default key: prefix ] ; interactively clipboard history key: prefix =
bind-key + delete-buffer \; display-message "Deleted current Tmux Clipboard History"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# vim copy mode rebinds for (tmux 2.4+)
# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  'bind-key -T copy-mode-vi v send-keys -X begin-selection; \
  bind-key -T copy-mode-vi V send-keys -X select-line; \
  bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle; \
  bind-key -T choice-mode-vi h send-keys -X tree-collapse ; \
  bind-key -T choice-mode-vi l send-keys -X tree-expand ; \
  bind-key -T choice-mode-vi H send-keys -X tree-collapse-all ; \
  bind-key -T choice-mode-vi L send-keys -X tree-expand-all ; \
  bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xsel -ip"; \
  bind-key -T copy-mode-vi y send-keys -X copy-pipe "xsel -pi"'

bind-key -T copy-mode-vi 'o' send-keys -X copy-selection \; \
  new-window -n google \; \
  send-keys -t google 'sr google "$(tmux show-buffer)" && tmux kill-window' 'Enter'

bind-key -T copy-mode-vi 'U' send-keys -X copy-selection \; \
  new-window -n youtube \; \
  send-keys -t youtube 'youtube-viewer "$(tmux show-buffer)" && tmux kill-window' 'Enter'

bind-key -T copy-mode-vi 'O' send-keys -X copy-selection \; \
  new-window -n w3m \; \
  send-keys -t w3m 'w3m "$(tmux show-buffer)" && tmux kill-window' 'Enter'
# ]]]

# == Interactive Keybinds =================================================== [[[
# join pane to window/session (interactively)
bind-key W choose-tree -Zw "swap-window -t '%%'"
bind-key P choose-tree -Zw "swap-pane -t '%%'"
# bind-key C-w choose-tree -Zw "move-window -t '%%'"
bind-key C-p choose-tree -Zw "move-pane -t '%%'"

# M-w
bind-key ∑ command-prompt -p \
  "Swap Current Window To? (e.g 3; 4; session_name:5)" "swap-window -t '%%'"
# M-S-p
bind-key ∏ command-prompt -p \
  "Swap Current Pane To? (e.g 2.0; session_name:4.0)" "swap-pane -t '%%'"
# M-p
bind-key π command-prompt -p \
  "Move Current Pane To? (e.g 3.1; session_name:6.0)" "move-pane -t '%%'"

# swap panes around
# bind-key -r -T prefix C-M-k select-pane -U \; swap-pane -t !
# bind-key -r -T prefix C-M-j select-pane -D \; swap-pane -t !
# bind-key -r -T prefix C-M-h select-pane -L \; swap-pane -t !
# bind-key -r -T prefix C-M-l select-pane -R \; swap-pane -t !

# bind-key C-M-w command-prompt -p "Swap Current Window To? (e.g 3; 4; session_name:5)" "swap-window -t '%%'"
# bind-key C-M-p command-prompt -p "Swap Current Pane To? (e.g 2.0; session_name:4.0)" "swap-pane -t '%%'"
# bind-key M-p command-prompt -p "Move Current Pane To? (e.g 3.1; session_name:6.0)" "move-pane -t '%%'"
# ]]]

# == External Programs ======================================================= [[[
# == Youtube == M-v
bind-key Y split-window -fv \; send-keys 'youtube-viewer '
bind-key -n '√' new-window -n ytfzf \; \
    send-keys -t ytfzf 'ytfzf && tmux kill-window' 'Enter'

# == Surfraw == M-s
# bind-key -n 'C-\' new-window -n bookmarks -c $HOME \; \
#     send-keys 'fsr && tmux kill-window' 'Enter'
bind-key Enter split-window -fv \; send-keys 'BROWSER=w3m sr '
bind-key -n 'ß' new-window -n google \; \
    send-keys -t google 'BROWSER=w3m sr google '

# == Buku ==
bind-key b split-window -fv \; send-keys 'bow && tmux kill-pane' 'Enter'
bind-key -n 'C-\' new-window -n bookmarks -c $HOME \; \
    send-keys 'bow && tmux kill-window' 'Enter'

# neomutt -- M-m
# bind-key µ new-window -n email -c $HOME \; \
#   send-keys -t email 'neomutt' 'Enter'
bind-key -n 'µ' new-window -n email -c $HOME \; \
    send-keys 'neomutt && tmux kill-window' 'Enter'

# newsboat -- M-r
# bind-key ® new-window -n rss -c $HOME \; \
#   send-keys -t rss 'newsboat' 'Enter'
bind-key -n '®' new-window -n rss -c $HOME \; \
    send-keys 'newsboat && tmux kill-window' 'Enter'

# task spooler -- M-t
bind-key † new-window -n spool -c $HOME \; \
  send-keys -t spool 'ts -C && watch ts' 'Enter' \; \
  split-window -t spool -v \; \
  send-keys -t spool 'TS_SOCKET=/tmp/fm ts -C && watch TS_SOCKET=/tmp/fm ts' 'Enter' \; \
  split-window -t spool -v -p 10
# ]]]

# == Testing ================================================================ [[[
# https://gist.github.com/snuggs/800936
# bind o select-layout "active-only"
# bind M-- select-layout "even-vertical"
# bind M-| select-layout "even-horizontal"
# bind M-r rotate-window
# ]]]

# == Source ================================================================= [[[
run "$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm"
# run -b '~/.config/tmux/plugins/tpm/tpm'
# ]]]

# vim: ft=tmux:et:sw=0:ts=2:sts=2:fdm=marker:fmr=[[[,]]]:
